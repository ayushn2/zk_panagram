"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BarretenbergSync = exports.Barretenberg = exports.AztecClientBackend = exports.UltraHonkBackend = exports.BarretenbergVerifier = void 0;
const tslib_1 = require("tslib");
const comlink_1 = require("comlink");
const index_js_1 = require("../barretenberg_api/index.js");
const index_js_2 = require("../barretenberg_wasm/barretenberg_wasm_main/factory/node/index.js");
const index_js_3 = require("../barretenberg_wasm/barretenberg_wasm_main/index.js");
const index_js_4 = require("../barretenberg_wasm/helpers/index.js");
const debug_1 = tslib_1.__importDefault(require("debug"));
const index_js_5 = require("../crs/index.js");
const raw_buffer_js_1 = require("../types/raw_buffer.js");
const index_js_6 = require("../barretenberg_wasm/index.js");
var verifier_js_1 = require("./verifier.js");
Object.defineProperty(exports, "BarretenbergVerifier", { enumerable: true, get: function () { return verifier_js_1.BarretenbergVerifier; } });
var backend_js_1 = require("./backend.js");
Object.defineProperty(exports, "UltraHonkBackend", { enumerable: true, get: function () { return backend_js_1.UltraHonkBackend; } });
Object.defineProperty(exports, "AztecClientBackend", { enumerable: true, get: function () { return backend_js_1.AztecClientBackend; } });
/**
 * The main class library consumers interact with.
 * It extends the generated api, and provides a static constructor "new" to compose components.
 */
class Barretenberg extends index_js_1.BarretenbergApi {
    constructor(worker, wasm, options) {
        super(wasm);
        this.worker = worker;
        this.options = options;
    }
    /**
     * Constructs an instance of Barretenberg.
     * Launches it within a worker. This is necessary as it blocks waiting on child threads to complete,
     * and blocking the main thread in the browser is not allowed.
     * It threads > 1 (defaults to hardware availability), child threads will be created on their own workers.
     */
    static async new(options = {}) {
        const worker = await (0, index_js_2.createMainWorker)();
        const wasm = (0, index_js_4.getRemoteBarretenbergWasm)(worker);
        const { module, threads } = await (0, index_js_6.fetchModuleAndThreads)(options.threads, options.wasmPath, options.logger);
        await wasm.init(module, threads, (0, comlink_1.proxy)(options.logger ?? (0, debug_1.default)('bb.js:bb_wasm_async')), options.memory?.initial, options.memory?.maximum);
        return new Barretenberg(worker, wasm, options);
    }
    async getNumThreads() {
        return await this.wasm.getNumThreads();
    }
    async initSRSForCircuitSize(circuitSize) {
        const crs = await index_js_5.Crs.new(circuitSize + 1, this.options.crsPath, this.options.logger);
        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1129): Do slab allocator initialization?
        // await this.commonInitSlabAllocator(circuitSize);
        await this.srsInitSrs(new raw_buffer_js_1.RawBuffer(crs.getG1Data()), crs.numPoints, new raw_buffer_js_1.RawBuffer(crs.getG2Data()));
    }
    async initSRSClientIVC() {
        // crsPath can be undefined
        const crs = await index_js_5.Crs.new(2 ** 20 + 1, this.options.crsPath, this.options.logger);
        const grumpkinCrs = await index_js_5.GrumpkinCrs.new(2 ** 16 + 1, this.options.crsPath, this.options.logger);
        // Load CRS into wasm global CRS state.
        // TODO: Make RawBuffer be default behavior, and have a specific Vector type for when wanting length prefixed.
        await this.srsInitSrs(new raw_buffer_js_1.RawBuffer(crs.getG1Data()), crs.numPoints, new raw_buffer_js_1.RawBuffer(crs.getG2Data()));
        await this.srsInitGrumpkinSrs(new raw_buffer_js_1.RawBuffer(grumpkinCrs.getG1Data()), grumpkinCrs.numPoints);
    }
    async acirInitSRS(bytecode, recursive, honkRecursion) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const [_total, subgroupSize] = await this.acirGetCircuitSizes(bytecode, recursive, honkRecursion);
        return this.initSRSForCircuitSize(subgroupSize);
    }
    async destroy() {
        await this.wasm.destroy();
        await this.worker.terminate();
    }
    getWasm() {
        return this.wasm;
    }
}
exports.Barretenberg = Barretenberg;
let barretenbergSyncSingletonPromise;
let barretenbergSyncSingleton;
class BarretenbergSync extends index_js_1.BarretenbergApiSync {
    constructor(wasm) {
        super(wasm);
    }
    static async new(wasmPath, logger = (0, debug_1.default)('bb.js:bb_wasm_sync')) {
        const wasm = new index_js_3.BarretenbergWasmMain();
        const { module, threads } = await (0, index_js_6.fetchModuleAndThreads)(1, wasmPath, logger);
        await wasm.init(module, threads, logger);
        return new BarretenbergSync(wasm);
    }
    static async initSingleton(wasmPath, logger = (0, debug_1.default)('bb.js:bb_wasm_sync')) {
        if (!barretenbergSyncSingletonPromise) {
            barretenbergSyncSingletonPromise = BarretenbergSync.new(wasmPath, logger);
        }
        barretenbergSyncSingleton = await barretenbergSyncSingletonPromise;
        return barretenbergSyncSingleton;
    }
    static getSingleton() {
        if (!barretenbergSyncSingleton) {
            throw new Error('First call BarretenbergSync.initSingleton() on @aztec/bb.js module.');
        }
        return barretenbergSyncSingleton;
    }
    getWasm() {
        return this.wasm;
    }
}
exports.BarretenbergSync = BarretenbergSync;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxxQ0FBZ0M7QUFDaEMsMkRBQW9GO0FBQ3BGLGdHQUFxRztBQUNyRyxtRkFBd0g7QUFDeEgsb0VBQWtGO0FBQ2xGLDBEQUFnQztBQUNoQyw4Q0FBbUQ7QUFDbkQsMERBQW1EO0FBQ25ELDREQUFzRTtBQUV0RSw2Q0FBcUQ7QUFBNUMsbUhBQUEsb0JBQW9CLE9BQUE7QUFDN0IsMkNBQW9FO0FBQTNELDhHQUFBLGdCQUFnQixPQUFBO0FBQUUsZ0hBQUEsa0JBQWtCLE9BQUE7QUF3QjdDOzs7R0FHRztBQUNILE1BQWEsWUFBYSxTQUFRLDBCQUFlO0lBRy9DLFlBQ1UsTUFBVyxFQUNuQixJQUFnQyxFQUNoQyxPQUF1QjtRQUV2QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFKSixXQUFNLEdBQU4sTUFBTSxDQUFLO1FBS25CLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQTBCLEVBQUU7UUFDM0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLDJCQUFnQixHQUFFLENBQUM7UUFDeEMsTUFBTSxJQUFJLEdBQUcsSUFBQSxvQ0FBeUIsRUFBNkIsTUFBTSxDQUFDLENBQUM7UUFDM0UsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxNQUFNLElBQUEsZ0NBQXFCLEVBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQ2IsTUFBTSxFQUNOLE9BQU8sRUFDUCxJQUFBLGVBQUssRUFBQyxPQUFPLENBQUMsTUFBTSxJQUFJLElBQUEs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